{"google":"","body":"### Coffeet.in\r\n\r\n#### Date formatting\r\nCurly brackets used as a format specifier. You can also zero-pad values, a la `(new Date).format(\"{FullYear}-{Month:2}-{Date:2}\")`\r\n\r\n```coffee-script\r\n# http://coffeet.in/date-format\r\nDate::format = (fmt) ->\r\n\tfmt.replace /\\{([^}:]+)(?::(\\d+))?\\}/g, (raw, comp, len) =>\r\n\t\tunless (n = @[\"get\"+comp]?())? then raw\r\n\t\telse (Array(+len|0).join('0')+(n+(if comp == 'Month' then 1 else '')))[-len..]\r\nDate::getFullMonth = ->\r\n\t'January|February|March|April|May|June|July|August|September|October|November|December'.split('|')[@getMonth()]\r\nDate::getHoursMeridiem = -> ((@getHours()+11) % 12)+1\r\nDate::getMeridiem = -> if @getHours() >= 12 then 'pm' else 'am'\r\n```\r\n\r\n#### Cookies\r\nUsage like: <https://github.com/carhartl/jquery-cookie>\r\n\r\n```coffee-script\r\nCookies =\r\n\tset: (key, value, {path, domain, secure, raw, expires} = {}) ->\r\n\t\tif value in [null, undefined] then expires = -1\r\n\t\tif typeof expires == 'number'\r\n\t\t\tdays = expires\r\n\t\t\t(expires = new Date()).setDate (new Date().getDate() + days)\r\n\t\treturn document.cookie = [encodeURIComponent(key), \"=\",\r\n\t\t\tif raw then \"\"+value else encodeURIComponent(\"\"+value),\r\n\t\t\t# use expires attribute, max-age is not supported by IE\r\n\t\t\tif expires? then \"; expires=\" + expires.toUTCString() \r\n\t\t\tif path? then \"; path=\" + path\r\n\t\t\tif domain? then \"; domain=\" + domain\r\n\t\t\tif secure? then \"; secure\"\r\n\t\t].join ''\r\n\r\n\tget: (key, {raw} = {}) ->\r\n\t\tdecode = unless raw then decodeURIComponent else (s) -> s\r\n\t\tfor pair in document.cookie.split(\"; \") when (pair = pair.split(\"=\")) and decode(pair[0]) == key\r\n\t\t\t# IE saves cookies with empty string as \"c; \", e.g. without \"=\" as opposed to EOMB, thus pair[1] may be undefined\r\n\t\t\treturn decode(pair[1] or '')\r\n\t\treturn null\r\n```\r\n\r\n#### EventEmitter\r\n\r\n```coffee-script\r\nclass EventEmitter\r\n\t\tlisteners: (type) ->\r\n\t\t\tif @hasOwnProperty.call (if @_events? then @_events else @_events = {}), type then @_events[type] else @_events[type] = []\r\n\t\ton: (args...) -> @addListener args...\r\n\t\tonce: (type, f) -> @on type, g = (args...) -> f.apply(this, args); @removeListener type, g\r\n\t\taddListener: (type, f) ->\r\n\t\t\tif (@listeners(type).push f) > @_maxListeners and @_maxListeners != 0\r\n\t\t\t\tconsole?.warn \"Possible EventEmitter memory leak detected. #{@_events[type].length} listeners added. Use emitter.setMaxListeners() to increase limit.\"\r\n\t\t\t@emit \"newListener\", type, f\r\n\t\t\tthis\r\n\t\tremoveListener: (type, f) ->\r\n\t\t\tif (i = @listeners(type).indexOf f) != -1 then @listeners(type).splice i, 1\r\n\t\t\tthis\r\n\t\tremoveAllListeners: (type) ->\r\n\t\t\tfor k, v of (@_events or {}) when not type? or type == k then v.splice(0, v.length)\r\n\t\t\tthis\r\n\t\temit: (type, args...) ->\r\n\t\t\tfor f in @listeners(type) then f.apply this, args\r\n\t\t\t@listeners(type).length > 0\r\n\t\t_maxListeners: 10\r\n\t\tsetMaxListeners: (@_maxListeners) ->\r\n```\r\n\r\n#### DOM One-liners\r\n\r\n```coffee-script\r\nDom =\r\n\r\n\t# Info.\r\n\r\n\tisText: (d) -> d?.nodeType == 3\r\n\tisElement: (d, n) ->\r\n\t\tn = [n] if typeof n == 'string'\r\n\t\td?.nodeType == 1 and (not n? or d.nodeName.toLowerCase() in n)\r\n\r\n\tisInline: (d) -> not Dom.isBlock d\r\n\tisBlock: (d) -> /^(address|blockquote|body|center|dir|div|dl|fieldset|form|h[1-6]|hr|isindex|menu|noframes|noscript|ol|p|pre|table|ul|dd|dt|frameset|li|tbody|td|tfoot|th|thead|tr|html)$/i.test d?.nodeName\r\n\r\n\tcontains: (n1, n2) ->\r\n\t\t#[TODO] might fail on IE-- does contains work for (element, textnode) ?\r\n\t\treturn if n1.compareDocumentPosition?\r\n\t\t\t\tn1.compareDocumentPosition(n2) & 16\r\n\t\t\telse\r\n\t\t\t\tn1.contains(n2)\r\n\r\n\tgetChildIndex: (e) ->\r\n\t\tk = 0\r\n\t\tk++ while e = e.previousSibling\r\n\t\treturn k\r\n\r\n\ttagName: (e) -> e.nodeName.toLowerCase()\r\n\r\n\tgetAttrs: (e) ->\r\n\t\tattrs = {}\r\n\t\tfor attr in e.attributes\r\n\t\t\tattrs[attr.nodeName] = attr.nodeValue\r\n\t\treturn attrs\r\n\r\n\tdocument: (e) -> e?.ownerDocument\r\n\r\n\tdoesElementMatch: (e, tag, attrs) ->\r\n\t\treturn no unless tag == Dom.tagName(e)\r\n\t\tfor k, v of attrs then return no unless v == e.getAttribute(k)\r\n\t\t# Currently, we allow client to have extra attributes.\r\n\t\treturn yes\r\n\r\n\t# Data.\r\n\r\n\tgetData: (e, key) ->\r\n\t\tval = e.getAttribute('data-' + key)\r\n\t\treturn if val? then JSON.parse(val) else val\r\n\r\n\tgetDataset: (e) ->\r\n\t\tatts = {}\r\n\t\tfor a in e.attributes when a.name.match(/^data-/)\r\n\t\t\tatts[a.name.substr(5)] = a.value\r\n\t\treturn atts\r\n\r\n\tsetData: (e, key, val) ->\r\n\t\tif val? then e.setAttribute('data-' + key, JSON.stringify(val))\r\n\t\telse e.removeAttribute('data-' + key)\r\n```","tagline":"CoffeeScript snippets.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Coffeet.in"}